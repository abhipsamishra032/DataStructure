//LeetCode 25. Reverse Nodes in k-Group

//Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
//k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
//You may not alter the values in the list's nodes, only nodes themselves may be changed.

//Input: head = [1,2,3,4,5], k = 2, Output: [2,1,4,3,5]
//Input: head = [1,2,3,4,5], k = 3, Output: [3,2,1,4,5]

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} k
 * @return {ListNode}
 */
var reverseKGroup = function(head, k) {
    let node = head, node1 = head, node2 = new ListNode(0), prev = node2, count = 0;
    while(node) {
        count++;
        if(count % k === 0) {
            let temp = node.next;
            node2 = reverseLinkedList(node1, count, node2);            
            count = 0;
            node = temp;
            node1 = temp;
        } else {
            node = node.next 
            if(node === null) {
                while(node2) {
                    if(node2.next === null) {
                        node2.next = node1;
                        break;
                    } else {
                        node2 = node2.next
                    }
                }
            }
        }
    }
    return prev.next;
};

function reverseLinkedList(head, count, node2) {
    let node = head, prev = null, newNode = node2;
    while(node && count > 0) {
        let temp = node.next;
        node.next = prev;
        prev = node;
        node = temp
        count--;
    }
    while(newNode) {
        if(newNode.next === null) {
            newNode.next = prev;
            break;
        }
        else newNode = newNode.next
    }
    return node2
}
