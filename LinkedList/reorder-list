/**
Leet code challange
143. Reorder List
You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

 Input: head = [1,2,3,4]
Output: [1,4,2,3]

***/

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {void} Do not return anything, modify head in-place instead.
 */
var reorderList = function(head) {
    if(head === null) return head;
    let slow = head, fast = head;
    while(fast && fast.next) {
        slow = slow.next;
        fast = fast.next.next;
    }
    let prev = null, node = slow;
    while(node) {
        let temp = node.next;
        node.next = prev;
        prev = node;
        node = temp
    }
    let node1 = head, node2 = prev;
    while(node2.next) {
        let temp1 = node1.next, temp2 = node2.next;
        node1.next = node2;
        node1 = temp1;
        
        node2.next = node1;
        node2 = temp2;
    }
};

