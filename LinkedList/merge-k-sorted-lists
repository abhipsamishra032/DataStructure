
/***
Leet Code Challange

23. Merge k Sorted Lists

You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
***/

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode[]} lists
 * @return {ListNode}
 */
var mergeKLists = function(lists) {
    let count = 0, result = new ListNode(Number.MIN_SAFE_INTEGER);
    while(count < lists.length) {
        result = mergeSort(result, lists[count]);
        count++;
    }
    return result.next
}
    
// Used Merge Sort logic with time complexity as logn
function mergeSort(list1, list2) {
    let resultList = new ListNode(0), result = resultList;
    while(list1) {
        if(list2 === null || list1.val <= list2.val) {
            resultList.next = new ListNode(list1.val);
            list1 = list1.next;
        } else {
            resultList.next = new ListNode(list2.val);
            list2= list2.next;
        }
        resultList = resultList.next;
    }
    resultList.next = list2
    return result.next;
}
